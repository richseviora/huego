package resources

import (
	"context"
	"fmt"
	"time"
)

// TODO: Implement
type LightEffect struct {
}

// TODO: Implement
type LightEffectV2 struct {
}

type AutoGenerated struct {
	Errors []any       `json:"errors"`
	Data   []SceneData `json:"data"`
}
type Target struct {
	Rid   string `json:"rid"`
	Rtype string `json:"rtype"`
}
type On struct {
	On bool `json:"on"`
}

type ColorGradient struct {
	Points []any
}
type Action struct {
	On               *On               `json:"on"`
	Dimming          *Dimming          `json:"dimming"`
	ColorTemperature *ColorTemperature `json:"color_temperature,omitempty"`
	Color            *Color            `json:"color,omitempty"`
	Gradient         *ColorGradient    `json:"gradient,omitempty"`
	EffectsV2        *LightEffectV2    `json:"effects_v2,omitempty"`
}
type ActionTarget struct {
	Target Target `json:"target"`
	Action Action `json:"action"`
}

type Palette struct {
	Color            []Color            `json:"color"`
	Dimming          []Dimming          `json:"dimming"`
	ColorTemperature []ColorTemperature `json:"color_temperature"`
	Effects          []LightEffect      `json:"effects"`
	EffectsV2        []LightEffectV2    `json:"effects_v2"`
}
type Recall struct {
}
type Image struct {
	Rid   string `json:"rid"`
	Rtype string `json:"rtype"`
}
type SceneMetadata struct {
	Name  string `json:"name"`
	Image *Image `json:"image,omitempty"`
}
type Group struct {
	Rid   string `json:"rid"`
	Rtype string `json:"rtype"`
}
type Status struct {
	Active     string    `json:"active"`
	LastRecall time.Time `json:"last_recall"`
}

type SceneData struct {
	ID          string         `json:"id"`
	IDV1        string         `json:"id_v1"`
	Actions     []ActionTarget `json:"actions"`
	Palette     Palette        `json:"palette"`
	Recall      Recall         `json:"recall"`
	Metadata    SceneMetadata  `json:"metadata"`
	Group       Group          `json:"group"`
	Speed       float64        `json:"speed"`
	AutoDynamic bool           `json:"auto_dynamic"`
	Status      Status         `json:"status"`
	Type        string         `json:"type"`
}

func (s SceneData) Identity() string {
	return s.ID
}

var _ Identable = &SceneData{}

type SceneCreate struct {
	Metadata SceneMetadata  `json:"metadata"`
	Actions  []ActionTarget `json:"actions"`
	Group    Group          `json:"group"`
}

type SceneUpdate struct {
	Metadata SceneMetadata  `json:"metadata"`
	Actions  []ActionTarget `json:"actions"`
}

type SceneService struct {
	client *APIClient
}

func NewSceneService(client *APIClient) *SceneService {
	return &SceneService{
		client: client,
	}
}

func (s *SceneService) GetAllScenes(ctx context.Context) (*ResourceList[SceneData], error) {
	return Get[ResourceList[SceneData]](ctx, "/clip/v2/resource/scene", s.client)
}

func (s *SceneService) GetScene(ctx context.Context, id string) (*SceneData, error) {
	path := fmt.Sprintf("/clip/v2/resource/scene/%s", id)
	return GetSingularResource[SceneData](id, path, ctx, s.client, "scene")
}

func (s *SceneService) UpdateScene(ctx context.Context, id string, scene SceneUpdate) (*Reference, error) {
	url := fmt.Sprintf("/clip/v2/resource/scene/%s", id)
	return UpdateResource(url, ctx, scene, s.client, "scene")
}

func (s *SceneService) CreateScene(ctx context.Context, scene SceneCreate) (*Reference, error) {
	return CreateResource("/clip/v2/resource/scene", ctx, scene, s.client, "scene")
}

func (s *SceneService) DeleteScene(ctx context.Context, id string) error {
	return Delete(ctx, fmt.Sprintf("/clip/v2/resource/scene/%s", id), s.client)
}
