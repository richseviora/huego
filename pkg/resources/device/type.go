package device

import (
	"context"
	"errors"
	"github.com/richseviora/huego/pkg/resources/common"
)

type AutoGenerated struct {
	Errors []any  `json:"errors"`
	Data   []Data `json:"data"`
}
type ProductData struct {
	ModelID              string `json:"model_id"`
	ManufacturerName     string `json:"manufacturer_name"`
	ProductName          string `json:"product_name"`
	ProductArchetype     string `json:"product_archetype"`
	Certified            bool   `json:"certified"`
	SoftwareVersion      string `json:"software_version"`
	HardwarePlatformType string `json:"hardware_platform_type,omitempty"`
}
type Metadata struct {
	Name      string `json:"name"`
	Archetype string `json:"archetype"`
}
type Identify struct {
}
type Services struct {
	Rid   string `json:"rid"`
	Rtype string `json:"rtype"`
}

type Usertest struct {
	Status   string `json:"status"`
	Usertest bool   `json:"usertest"`
}
type Data struct {
	ID          string      `json:"id"`
	IDV1        string      `json:"id_v1,omitempty"`
	ProductData ProductData `json:"product_data,omitempty"`
	Metadata    Metadata    `json:"metadata"`
	Identify    Identify    `json:"identify"`
	Services    []Services  `json:"services"`
	Type        string      `json:"type"`
	Usertest    Usertest    `json:"usertest,omitempty"`
}

var (
	_ common.Identable = &Data{}
)

func (d Data) Identity() string {
	return d.ID
}

func (d Data) GetLightServiceID() (string, error) {
	for _, service := range d.Services {
		if service.Rtype == "light" {
			return service.Rid, nil
		}
	}
	return "", errors.New("no light service found")
}

func (d Data) GetZigbeeConnectivityServiceID() (string, error) {
	for _, service := range d.Services {
		if service.Rtype == "zigbee_connectivity" {
			return service.Rid, nil
		}
	}
	return "", errors.New("no zigbee_connectivity service found")
}

type Service interface {
	GetAllDevices(ctx context.Context) (*common.ResourceList[Data], error)
	GetDevice(ctx context.Context, id string) (*Data, error)
}
