package scene

import (
	"context"
	"github.com/richseviora/huego/pkg/resources/common"
	"github.com/richseviora/huego/pkg/resources/light"
	"time"
)

// TODO: Implement
type LightEffect struct {
}

// TODO: Implement
type LightEffectV2 struct {
}

type AutoGenerated struct {
	Errors []any       `json:"errors"`
	Data   []SceneData `json:"data"`
}
type Target struct {
	Rid   string `json:"rid"`
	Rtype string `json:"rtype"`
}
type On struct {
	On bool `json:"on"`
}

type ColorGradient struct {
	Points []any
}
type Action struct {
	On               *On                     `json:"on"`
	Dimming          *common.Dimming         `json:"dimming"`
	ColorTemperature *light.ColorTemperature `json:"color_temperature,omitempty"`
	Color            *light.Color            `json:"color,omitempty"`
	Gradient         *ColorGradient          `json:"gradient,omitempty"`
	EffectsV2        *LightEffectV2          `json:"effects_v2,omitempty"`
}
type ActionTarget struct {
	Target Target `json:"target"`
	Action Action `json:"action"`
}

type Palette struct {
	Color            []light.Color            `json:"color"`
	Dimming          []common.Dimming         `json:"dimming"`
	ColorTemperature []light.ColorTemperature `json:"color_temperature"`
	Effects          []LightEffect            `json:"effects"`
	EffectsV2        []LightEffectV2          `json:"effects_v2"`
}
type Recall struct {
}
type Image struct {
	Rid   string `json:"rid"`
	Rtype string `json:"rtype"`
}
type SceneMetadata struct {
	Name  string `json:"name"`
	Image *Image `json:"image,omitempty"`
}
type Group struct {
	Rid   string `json:"rid"`
	Rtype string `json:"rtype"`
}
type Status struct {
	Active     string    `json:"active"`
	LastRecall time.Time `json:"last_recall"`
}

type SceneData struct {
	ID          string         `json:"id"`
	IDV1        string         `json:"id_v1"`
	Actions     []ActionTarget `json:"actions"`
	Palette     Palette        `json:"palette"`
	Recall      Recall         `json:"recall"`
	Metadata    SceneMetadata  `json:"metadata"`
	Group       Group          `json:"group"`
	Speed       float64        `json:"speed"`
	AutoDynamic bool           `json:"auto_dynamic"`
	Status      Status         `json:"status"`
	Type        string         `json:"type"`
}

func (s SceneData) Identity() string {
	return s.ID
}

var _ common.Identable = &SceneData{}

type SceneCreate struct {
	Metadata SceneMetadata  `json:"metadata"`
	Actions  []ActionTarget `json:"actions"`
	Group    Group          `json:"group"`
}

type SceneUpdate struct {
	Metadata SceneMetadata  `json:"metadata"`
	Actions  []ActionTarget `json:"actions"`
}

type SceneService interface {
	GetAllScenes(ctx context.Context) (*common.ResourceList[SceneData], error)
	GetScene(ctx context.Context, id string) (*SceneData, error)
	UpdateScene(ctx context.Context, id string, scene SceneUpdate) (*common.Reference, error)
	CreateScene(ctx context.Context, scene SceneCreate) (*common.Reference, error)
	DeleteScene(ctx context.Context, id string) error
}
